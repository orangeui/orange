/**
 * Grid
 */

/**
  Container
*/
.container {
  max-width: $container-max-width;
}

.container, .container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $container-gutter;
  padding-left: $container-gutter;
}

/**
  Grid
*/
@mixin grid-column-auto-fill ($min-width) {
  grid-template-columns: repeat(auto-fill, minmax($min-width, $grid-column-max-width));
}

/* Grid (usually it was called row) */
.grid {
  display: grid;
  grid-gap: $grid-gutter;
  grid-template-columns: repeat(12, 1fr);
}

/* Auto Layout */
.grid--columns-auto {
  @include grid-column-auto-fill($grid-column-min-width-regular);

  &-narrow {
    @include grid-column-auto-fill($grid-column-min-width-narrow);
  }

  &-wide {
    @include grid-column-auto-fill($grid-column-min-width-wide);
  }
}

/* Basic Columns */
@for $column from 1 through $grid-column-number {
  .col-#{$column} {
    grid-column: span $column;
  }
}

/* Columns positions */
@for $column from 1 through $grid-column-number {
  @for $i from 1 through $column {
    @if $i < $column {
      .col-#{$i}\/#{$column} {
        grid-column: #{$i}/#{$column + 1}; // Add +1 because the "grid-column-end" ends before the actual number of column and not with it
      }
    }
  }
}

/* Basic Rows */
@for $row from 1 through $grid-row-number {
  .row-#{$row} {
    grid-row: $row;
  }
}
